# Stolen from synzox/ultisnips-fortran 
# Modified to my needs

# Main building blocks

snippet program "Program" b
PROGRAM ${1:name}
	IMPLICIT NONE
	${2:! code}
END PROGRAM $1
endsnippet

snippet module "Module" b
MODULE ${1:name}
	IMPLICIT NONE
	${2:! code}
END MODULE $1
endsnippet

snippet use "Use module" b
USE ${1:module}, ONLY: ${2:symbols}
endsnippet

snippet interface "Interface" b
INTERFACE ${1:name}
	${2:! code}
END INTERFACE $1
endsnippet

snippet subroutine "Subroutine" b
SUBROUTINE ${1:name}(${2:parameters})
	IMPLICIT NONE
	${3:! code}
END SUBROUTINE $1
endsnippet

snippet function "Function" b
FUNCTION ${1:name}(${2:parameters}) RESULT(${3:parameter})
	${4:! code}
END FUNCTION $1
endsnippet

# Control Flow

snippet if "If" b
IF (${1:condition}) THEN
	${2:! code}
END IF
endsnippet

snippet ifelse "If / Else" b
IF (${1:condition}) THEN
	${2:! code}
ELSE
	${3:! code}
END IF
endsnippet

snippet do "Do" b
DO ${1:i} = ${2:1}, ${3:N}
	${4:! code}
END DO
endsnippet

snippet dowhile "Do While" b
DO WHILE (${1:condition})
	${2:! code}
END DO
endsnippet

snippet select "Select case" b
SELECT CASE (${1:paramater})
	CASE (${2:condition})
		${3:! code}
	CASE DEFAULT
		${4:! code}
END SELECT
endsnippet

snippet where "Where" b
WHERE (${1:condition})
	${2:! code}
END WHERE
endsnippet

snippet elsewhere "Where / Elsewhere" b
WHERE (${1:condition})
	${2:! code}
ELSEWHERE
	${3:! code}
END WHERE
endsnippet

# Variables

snippet typeend "Type Full" b
TYPE :: ${1:typename}
	${2:! code}
END TYPE $1
endsnippet

snippet type "Basic type" b
TYPE(${1:typename}) :: ${2:name}
endsnippet

snippet parameter "Parameter" b 
${1:datatype}, PARAMETER :: ${3:name} = ${4:value}
endsnippet

snippet integer "Integer" b
INTEGER(KIND=${1:4}) :: ${2:name}
endsnippet

snippet real "Real" b
REAL(KIND=${1:8}) :: ${2:name}
endsnippet

snippet complex "Complex" b
COMPLEX(KIND=${1:8}) :: ${2:name}
endsnippet

snippet logical "Logical" b
LOGICAL :: ${1:name}
endsnippet

snippet character "Character" b
CHARACTER(LEN=${1:size}) :: ${2:name}
endsnippet

# Intent

snippet ii "Integer Intent" b
INTEGER(KIND=${1:4}}), INTENT(${2:INOUT}) :: ${3:name}
endsnippet

snippet ri "Real Intent" b
REAL(KIND=${1:8}}), INTENT(${2:INOUT}) :: ${3:name}
endsnippet

snippet ci "Complex Intent" b
COMPLEX(KIND=${1:8}}), INTENT(${2:INOUT}) :: ${3:name}
endsnippet

snippet li "Logical Intent" b
LOGICAL, INTENT(${1:INOUT}) :: ${2:name}
endsnippet

snippet chi "Character Intent" b
CHARACTER(LEN=${1:size}), INTENT(${2:INOUT}) :: ${3:name}
endsnippet

# Dimensions

snippet dim "Dimension" b
${1:datatype}, DIMENSION(${2:size}) :: ${3:name}
endsnippet

snippet intdim "Integer Dimension" b
INTEGER(KIND=${1:4}), DIMENSION(${2:size}) :: ${3:name}
endsnippet

snippet realdim "Real Dimension" b
REAL(KIND=${1:8}), DIMENSION(${2:size}) :: ${3:name}
endsnippet

snippet comdim "Complex Dimension" b
COMPLEX(KIND=${1:8}), DIMENSION(${2:size}) :: ${3:name}
endsnippet

snippet intdimall "Integer Dimension Allocatable" b
INTEGER(KIND=${1:4}), DIMENSION(${2:size}), ALLOCATABLE :: ${3:name}
endsnippet

snippet realdimall "Real Dimension Allocatable" b
REAL(KIND=${1:8}), DIMENSION(${2:size}), ALLOCATABLE :: ${3:name}
endsnippet

snippet comdimall "Complex Dimension Allocatable" b
COMPLEX(KIND=${1:8}), DIMENSION(${2:size}), ALLOCATABLE :: ${3:name}
endsnippet

# I/O

snippet open "Open File" b
OPEN (UNIT=${1:1}, FILE=${2:filename}, ${3})
${4:! code}
CLOSE($1)
endsnippet

snippet write "Write File" b
WRITE (${1:*}, ${2:*}) ${3:variable}
endsnippet

snippet read "Read File" b
READ(${1:*}, ${2:*}) ${3:target}
endsnippet
